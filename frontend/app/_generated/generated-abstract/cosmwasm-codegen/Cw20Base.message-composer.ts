// @ts-nocheck
          /**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { AppExecuteMsg, AppExecuteMsgFactory } from "@abstract-money/core";
import { Uint128, Logo, EmbeddedLogo, Binary, InstantiateMsg, Cw20Coin, InstantiateMarketingInfo, MinterResponse, ExecuteMsg, Expiration, Timestamp, Uint64, QueryMsg, AllAccountsResponse, AllAllowancesResponse, AllowanceInfo, AllSpenderAllowancesResponse, SpenderAllowanceInfo, AllowanceResponse, BalanceResponse, DownloadLogoResponse, LogoInfo, Addr, MarketingInfoResponse, TokenInfoResponse } from "./Cw20Base.types";
export interface Cw20BaseMsg {
contractAddress: string;
sender: string;
transfer: ({
  amount,
  recipient
}: {
  amount: Uint128;
  recipient: string;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
burn: ({
  amount
}: {
  amount: Uint128;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
send: ({
  amount,
  contract,
  msg
}: {
  amount: Uint128;
  contract: string;
  msg: Binary;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
increaseAllowance: ({
  amount,
  expires,
  spender
}: {
  amount: Uint128;
  expires?: Expiration;
  spender: string;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
decreaseAllowance: ({
  amount,
  expires,
  spender
}: {
  amount: Uint128;
  expires?: Expiration;
  spender: string;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
transferFrom: ({
  amount,
  owner,
  recipient
}: {
  amount: Uint128;
  owner: string;
  recipient: string;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
sendFrom: ({
  amount,
  contract,
  msg,
  owner
}: {
  amount: Uint128;
  contract: string;
  msg: Binary;
  owner: string;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
burnFrom: ({
  amount,
  owner
}: {
  amount: Uint128;
  owner: string;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
mint: ({
  amount,
  recipient
}: {
  amount: Uint128;
  recipient: string;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
updateMinter: ({
  newMinter
}: {
  newMinter?: string;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
updateMarketing: ({
  description,
  marketing,
  project
}: {
  description?: string;
  marketing?: string;
  project?: string;
}, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
uploadLogo: (logo: Logo, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class Cw20BaseMsgComposer implements Cw20BaseMsg {
sender: string;
contractAddress: string;

constructor(sender: string, contractAddress: string) {
  this.sender = sender;
  this.contractAddress = contractAddress;
  this.transfer = this.transfer.bind(this);
  this.burn = this.burn.bind(this);
  this.send = this.send.bind(this);
  this.increaseAllowance = this.increaseAllowance.bind(this);
  this.decreaseAllowance = this.decreaseAllowance.bind(this);
  this.transferFrom = this.transferFrom.bind(this);
  this.sendFrom = this.sendFrom.bind(this);
  this.burnFrom = this.burnFrom.bind(this);
  this.mint = this.mint.bind(this);
  this.updateMinter = this.updateMinter.bind(this);
  this.updateMarketing = this.updateMarketing.bind(this);
  this.uploadLogo = this.uploadLogo.bind(this);
}

transfer = ({
  amount,
  recipient
}: {
  amount: Uint128;
  recipient: string;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    transfer: {
      amount,
      recipient
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
burn = ({
  amount
}: {
  amount: Uint128;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    burn: {
      amount
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
send = ({
  amount,
  contract,
  msg
}: {
  amount: Uint128;
  contract: string;
  msg: Binary;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    send: {
      amount,
      contract,
      msg
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
increaseAllowance = ({
  amount,
  expires,
  spender
}: {
  amount: Uint128;
  expires?: Expiration;
  spender: string;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    increase_allowance: {
      amount,
      expires,
      spender
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
decreaseAllowance = ({
  amount,
  expires,
  spender
}: {
  amount: Uint128;
  expires?: Expiration;
  spender: string;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    decrease_allowance: {
      amount,
      expires,
      spender
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
transferFrom = ({
  amount,
  owner,
  recipient
}: {
  amount: Uint128;
  owner: string;
  recipient: string;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    transfer_from: {
      amount,
      owner,
      recipient
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
sendFrom = ({
  amount,
  contract,
  msg,
  owner
}: {
  amount: Uint128;
  contract: string;
  msg: Binary;
  owner: string;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    send_from: {
      amount,
      contract,
      msg,
      owner
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
burnFrom = ({
  amount,
  owner
}: {
  amount: Uint128;
  owner: string;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    burn_from: {
      amount,
      owner
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
mint = ({
  amount,
  recipient
}: {
  amount: Uint128;
  recipient: string;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    mint: {
      amount,
      recipient
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
updateMinter = ({
  newMinter
}: {
  newMinter?: string;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    update_minter: {
      new_minter: newMinter
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
updateMarketing = ({
  description,
  marketing,
  project
}: {
  description?: string;
  marketing?: string;
  project?: string;
}, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    update_marketing: {
      description,
      marketing,
      project
    }
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
uploadLogo = (logo: Logo, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
  const _msg = {
    upload_logo: {}
  };
  return {
    typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
    value: MsgExecuteContract.fromPartial({
      sender: this.sender,
      contract: this.contractAddress,
      msg: toUtf8(JSON.stringify(_msg)),
      funds: funds_
    })
  };
};
}